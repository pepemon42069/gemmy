// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillOrderData {
    #[prost(bytes = "vec", tag = "1")]
    pub order_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub matched_order_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "OrderSide", tag = "3")]
    pub taker_side: i32,
    #[prost(uint64, tag = "4")]
    pub price: u64,
    #[prost(uint64, tag = "5")]
    pub amount: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrder {
    #[prost(enumeration = "OrderStatus", tag = "1")]
    pub status: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub order_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub price: u64,
    #[prost(uint64, tag = "4")]
    pub quantity: u64,
    #[prost(enumeration = "OrderSide", tag = "5")]
    pub side: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillOrder {
    #[prost(enumeration = "OrderStatus", tag = "1")]
    pub status: i32,
    #[prost(message, repeated, tag = "2")]
    pub filled_orders: ::prost::alloc::vec::Vec<FillOrderData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialFillOrder {
    #[prost(enumeration = "OrderStatus", tag = "1")]
    pub status: i32,
    #[prost(message, optional, tag = "2")]
    pub partial_create: ::core::option::Option<CreateOrder>,
    #[prost(message, optional, tag = "3")]
    pub partial_fills: ::core::option::Option<FillOrder>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelModifyOrder {
    #[prost(enumeration = "OrderStatus", tag = "1")]
    pub status: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub order_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Failure {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderSide {
    Bid = 0,
    Ask = 1,
}
impl OrderSide {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Bid => "Bid",
            Self::Ask => "Ask",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Bid" => Some(Self::Bid),
            "Ask" => Some(Self::Ask),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderStatus {
    Created = 0,
    Filled = 1,
    PartiallyFilled = 2,
    Modified = 3,
    Cancelled = 4,
}
impl OrderStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Created => "Created",
            Self::Filled => "Filled",
            Self::PartiallyFilled => "PartiallyFilled",
            Self::Modified => "Modified",
            Self::Cancelled => "Cancelled",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Created" => Some(Self::Created),
            "Filled" => Some(Self::Filled),
            "PartiallyFilled" => Some(Self::PartiallyFilled),
            "Modified" => Some(Self::Modified),
            "Cancelled" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
